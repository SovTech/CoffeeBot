{"version":3,"sources":["../index.js"],"names":["controller","slackbot","debug","json_file_store","canJoinForCoffee","peopleWhoWanCoffee","spawn","token","startRTM","hears","bot","message","reply","personMaking","console","log","api","users","info","user","error","response","name","storage","get","userData","userCoffeeCount","count","save","id","setTimeout","peopleString","forEach","username","pref","push","userId","startConversation","convo","ask","say","text","next","coffee_pref"],"mappings":";;AAAA;;;;AACA;;;;AAEA,IAAMA,aAAa,iBAAOC,QAAP,CAAgB;AACjCC,SAAO,KAD0B;AAEjC;AACA;AACAC,mBAAiB;AAJgB,CAAhB,CAAnB;;AAOA,IAAIC,mBAAmB,KAAvB,C,CAA6B;AAC7B,IAAIC,qBAAqB,EAAzB,C,CAA4B;;AAE5B;AACAL,WAAWM,KAAX,CAAiB;AACfC;AADe,CAAjB,EAEGC;;AAEH;AAJA,GAKAR,WAAWS,KAAX,CAAiB,gBAAjB,EAAmC,CAAC,gBAAD,EAAmB,gBAAnB,EAAqC,SAArC,CAAnC,EAAoF,UAAUC,GAAV,EAAeC,OAAf,EAAwB;AAC1G,MAAIP,gBAAJ,EAAsB;AACpBM,QAAIE,KAAJ,CAAUD,OAAV,EAAmB,wFAAnB;AACD,GAFD,MAEO;AACL,QAAIE,eAAe,EAAnB;AACAT,uBAAmB,IAAnB;AACAC,yBAAqB,EAArB,CAHK,CAGmB;AACxBK,QAAIE,KAAJ,CAAUD,OAAV,EAAmB,wFAAnB;AACAG,YAAQC,GAAR,CAAYJ;;AAEZ;AAFA,MAGAD,IAAIM,GAAJ,CAAQC,KAAR,CAAcC,IAAd,CAAmB,EAACC,MAAMR,QAAQQ,IAAf,EAAnB,EAAyC,UAACC,KAAD,EAAQC,QAAR,EAAqB;AAC5D,UAAID,KAAJ,EAAW;AACTN,gBAAQC,GAAR,CAAYK,KAAZ;AACD;;AAEDP,qBAAeQ,SAASF,IAAT,CAAcG,IAA7B;;AAEA;AACAtB,iBAAWuB,OAAX,CAAmBN,KAAnB,CAAyBO,GAAzB,CAA6Bb,QAAQQ,IAAR,GAAe,sBAA5C,EAAoE,UAAUC,KAAV,EAAiBK,QAAjB,EAA2B;AAC7F,YAAIL,KAAJ,EAAW;AACTN,kBAAQC,GAAR,CAAYK,KAAZ;AACD;AACD,YAAIM,kBAAkB,CAAtB;AACAZ,gBAAQC,GAAR,CAAYU,QAAZ;AACA,YAAIA,QAAJ,EAAc;AACZ,cAAIA,SAASE,KAAb,EAAoB;AAClBD,8BAAkBD,SAASE,KAAT,EAAlB;AACD;AACF;AACD3B,mBAAWuB,OAAX,CAAmBN,KAAnB,CAAyBW,IAAzB,CAA8B;AAC5BC,cAAIlB,QAAQQ,IAAR,GAAe,sBADS;AAE5BQ,iBAAOD;AAFqB,SAA9B,EAGG,UAAUN,KAAV,EAAiB;AAClB,cAAIA,KAAJ,EAAW;AACTN,oBAAQC,GAAR,CAAYK,KAAZ;AACD;AACF,SAPD;AAQD,OAnBD;AAoBD;;AAED;AA9BA,MA+BAU,WAAW,YAAM;AACf1B,yBAAmB,KAAnB;;AAEA;AACA,UAAI2B,eAAe,EAAnB;AACA1B,yBAAmB2B,OAAnB,CAA2B,UAAUb,IAAV,EAAgB;AACzCY,wBAAgB,OAAOZ,KAAKc,QAAZ,GAAuB,KAAvB,GAA+Bd,KAAKe,IAApD;AACD,OAFD;AAGAxB,UAAIE,KAAJ,CAAUD,OAAV,EAAmBE,eAAe,wBAAlC;AACAH,UAAIE,KAAJ,CAAUD,OAAV,EAAmB,6CAA6CoB,YAAhE;AACD,KAVD,EAUG,KAVH;AAWD;AACF;;AAED;AAxDA,EAyDA/B,WAAWS,KAAX,CAAiB,gBAAjB,EAAmC,CAAC,gBAAD,EAAmB,gBAAnB,EAAqC,SAArC,CAAnC,EAAoF,UAAUC,GAAV,EAAeC,OAAf,EAAwB;AAC1G,MAAIP,gBAAJ,EAAsB;AACpBM,QAAIM,GAAJ,CAAQC,KAAR,CAAcC,IAAd,CAAmB,EAACC,MAAMR,QAAQQ,IAAf,EAAnB,EAAyC,UAACC,KAAD,EAAQC,QAAR,EAAqB;AAC5D,UAAID,KAAJ,EAAW;AACTN,gBAAQC,GAAR,CAAYK,KAAZ;AACD;AAH2D,UAIvDE,IAJuD,GAI/CD,SAASF,IAJsC,CAIvDG,IAJuD;;AAK5DjB,yBAAmB8B,IAAnB,CAAwB,EAACF,UAAUX,IAAX,EAAiBc,QAAQzB,QAAQQ,IAAjC,EAAuCe,MAAM,WAA7C,EAAxB;AACA,UAAIZ,SAAS,eAAT,IAA4BA,SAAS,MAAzC,EAAiD;AAC/CZ,YAAIE,KAAJ,CAAUD,OAAV,EAAmB,sCAAnB;AACD,OAFD,MAEO;AACLD,YAAIE,KAAJ,CAAUD,OAAV,EAAmB,uCAAnB;AACD;AACF,KAXD;AAYD,GAbD,MAaO;AACLD,QAAIE,KAAJ,CAAUD,OAAV,EAAmB,yDAAnB;AACD;AACF;;AAED;AACA;AApBA,EAqBAX,WAAWS,KAAX,CAAiB,mBAAjB,EAAsC,CAAC,gBAAD,EAAmB,gBAAnB,EAAqC,SAArC,CAAtC,EAAuF,UAAUC,GAAV,EAAeC,OAAf,EAAwB;AAC7G,MAAIP,gBAAJ,EAAsB;AACpBM,QAAIM,GAAJ,CAAQC,KAAR,CAAcC,IAAd,CAAmB,EAACC,MAAMR,QAAQQ,IAAf,EAAnB,EAAyC,UAACC,KAAD,EAAQC,QAAR,EAAqB;AAC5D,UAAID,KAAJ,EAAW;AACTN,gBAAQC,GAAR,CAAYK,KAAZ;AACD;AAH2D,UAIvDE,IAJuD,GAI/CD,SAASF,IAJsC,CAIvDG,IAJuD;;AAK5DjB,yBAAmB8B,IAAnB,CAAwB,EAACF,UAAUX,IAAX,EAAiBc,QAAQzB,QAAQQ,IAAjC,EAAuCe,MAAM,iBAA7C,EAAxB;AACA,UAAIZ,SAAS,eAAT,IAA4BA,SAAS,MAAzC,EAAiD;AAC/CZ,YAAIE,KAAJ,CAAUD,OAAV,EAAmB,yCAAnB;AACD,OAFD,MAEO;AACLD,YAAIE,KAAJ,CAAUD,OAAV,EAAmB,0CAAnB;AACD;AACF,KAXD;AAYD,GAbD,MAaO;AACLD,QAAIE,KAAJ,CAAUD,OAAV,EAAmB,yDAAnB;AACD;AACF;;AAED;AAnBA,EAoBAX,WAAWS,KAAX,CAAiB,gBAAjB,EAAmC,CAAC,gBAAD,EAAmB,gBAAnB,EAAqC,SAArC,CAAnC,EAAoF,UAAUC,GAAV,EAAeC,OAAf,EAAwB;AAC1GD,MAAI2B,iBAAJ,CAAsB1B,OAAtB,EAA+B,UAAUS,KAAV,EAAiBkB,KAAjB,EAAwB;AACrD,QAAIlB,KAAJ,EAAW;AACTN,cAAQC,GAAR,CAAYK,KAAZ;AACD;AACD;AACAkB,UAAMC,GAAN,CAAU,kCAAV,EAA8C,UAAUlB,QAAV,EAAoBiB,KAApB,EAA2B;AACvEA,YAAME,GAAN,CAAU,qBAAqBnB,SAASoB,IAAxC;AACAH,YAAMI;;AAEN;AAFA,SAGA1C,WAAWuB,OAAX,CAAmBN,KAAnB,CAAyBW,IAAzB,CAA8B;AAC5BC,YAAIlB,QAAQQ,IAAR,GAAe,cADS;AAE5BwB,qBAAatB,SAASoB;AAFM,OAA9B,EAGG,UAAUrB,KAAV,EAAiB;AAClB,YAAIA,KAAJ,EAAW;AACTN,kBAAQC,GAAR,CAAYK,KAAZ;AACD;AACF,OAPD;;AASAkB,YAAME,GAAN,CAAU,0CAAV;AACAF,YAAMI,IAAN;AACD;;AAED;AAlBA,MAmBAJ,MAAMC,GAAN,CAAU,+BAAV,EAA2C,UAAUlB,QAAV,EAAoBiB,KAApB,EAA2B;AACpEA,YAAME,GAAN,CAAU,qBAAqBnB,SAASoB,IAAxC;AACAH,YAAMI;;AAEN;AAFA,SAGA1C,WAAWuB,OAAX,CAAmBN,KAAnB,CAAyBW,IAAzB,CAA8B;AAC5BC,YAAIlB,QAAQQ,IAAR,GAAe,UADS;AAE5BwB,qBAAatB,SAASoB;AAFM,OAA9B,EAGG,UAAUrB,KAAV,EAAiB;AAClB,YAAIA,KAAJ,EAAW;AACTN,kBAAQC,GAAR,CAAYK,KAAZ;AACD;AACF,OAPD;;AASAkB,YAAME,GAAN,CAAU,uCAAV;AACAF,YAAMI,IAAN;AACD,KAhBD;AAiBD,GAzCD;AA0CD;;AAED;AA7CA,EA8CA1C,WAAWS,KAAX,CAAiB,UAAjB,EAA6B,CAAC,gBAAD,EAAmB,gBAAnB,EAAqC,SAArC,CAA7B,EAA8E,UAAUC,GAAV,EAAeC,OAAf,EAAwB;AACpGD,MAAIE,KAAJ,CAAUD,OAAV,EAAmB,4FAAnB;AACAD,MAAIE,KAAJ,CAAUD,OAAV,EAAmB,kIAAnB;AACAD,MAAIE,KAAJ,CAAUD,OAAV,EAAmB,2HAAnB;AACD;;AAED;AANA,EAOAX,WAAWS,KAAX,CAAiB,WAAjB,EAA8B,CAAC,gBAAD,EAAmB,gBAAnB,EAAqC,SAArC,CAA9B,EAA+E,UAAUC,GAAV,EAAeC,OAAf,EAAwB;AACrGD,MAAIE,KAAJ,CAAUD,OAAV,EAAmB,WAAnB;AACD,CAFD","file":"index.js","sourcesContent":["import Botkit from 'botkit'\nimport { slackBotKey } from './secrets'\n\nconst controller = Botkit.slackbot({\n  debug: false,\n  // include \"log: false\" to disable logging\n  // or a \"logLevel\" integer from 0 to 7 to adjust logging verbosity\n  json_file_store: 'coffee_bot_database.json'\n})\n\nlet canJoinForCoffee = false // a person can only join for coffee is someone has offered to make coffee\nlet peopleWhoWanCoffee = [] // array to hold the people who want coffee in the batch\n\n// connect the bot to a stream of messages\ncontroller.spawn({\n  token: slackBotKey\n}).startRTM()\n\n// Listen for messages sent to coffeeBot to let others know that you are about to make some coffee\ncontroller.hears('.*coffeetime.*', ['direct_message', 'direct_mention', 'mention'], function (bot, message) {\n  if (canJoinForCoffee) {\n    bot.reply(message, 'It looks like someone has already offered to make a batch - why not help them with it?')\n  } else {\n    let personMaking = ''\n    canJoinForCoffee = true\n    peopleWhoWanCoffee = [] // reset the array of people who want coffee\n    bot.reply(message, 'Awesome, get your orders in the the next minute or you will have to make for yourself!')\n    console.log(message)\n\n    // Record some stats - save the number of times someone offers to make coffee\n    bot.api.users.info({user: message.user}, (error, response) => {\n      if (error) {\n        console.log(error)\n      }\n\n      personMaking = response.user.name\n\n      // Get the saved value and increment it by 1\n      controller.storage.users.get(message.user + '_coffee_making_count', function (error, userData) {\n        if (error) {\n          console.log(error)\n        }\n        let userCoffeeCount = 0\n        console.log(userData)\n        if (userData) {\n          if (userData.count) {\n            userCoffeeCount = userData.count++\n          }\n        }\n        controller.storage.users.save({\n          id: message.user + '_coffee_making_count',\n          count: userCoffeeCount\n        }, function (error) {\n          if (error) {\n            console.log(error)\n          }\n        })\n      })\n    })\n\n    // Only give people 1 minute to get on the coffee boat\n    setTimeout(() => {\n      canJoinForCoffee = false\n\n      // at the end of the minute send a message with a summary of who wants what\n      let peopleString = ''\n      peopleWhoWanCoffee.forEach(function (user) {\n        peopleString += '\\n' + user.username + ' - ' + user.pref\n      })\n      bot.reply(message, personMaking + ' is making :+1: :taco:')\n      bot.reply(message, 'Time is up. The orders look as follows: ' + peopleString)\n    }, 30000)\n  }\n})\n\n// Listen for messages that someone wants tea\ncontroller.hears('.*I want tea.*', ['direct_message', 'direct_mention', 'mention'], function (bot, message) {\n  if (canJoinForCoffee) {\n    bot.api.users.info({user: message.user}, (error, response) => {\n      if (error) {\n        console.log(error)\n      }\n      let {name} = response.user\n      peopleWhoWanCoffee.push({username: name, userId: message.user, pref: 'Tea :tea:'})\n      if (name === 'edwardvincent' || name === 'gina') {\n        bot.reply(message, 'Ok, putting you down for a tea-quila')\n      } else {\n        bot.reply(message, 'Ok, putting you down for a cup of tea')\n      }\n    })\n  } else {\n    bot.reply(message, 'Nobody is making any now. Why don\\'t you offer to make?')\n  }\n})\n\n// Listen for messages that someone wants coffee\n// this function could be improved - it shares a lof of functionality with the tea version\ncontroller.hears('.*I want coffee.*', ['direct_message', 'direct_mention', 'mention'], function (bot, message) {\n  if (canJoinForCoffee) {\n    bot.api.users.info({user: message.user}, (error, response) => {\n      if (error) {\n        console.log(error)\n      }\n      let {name} = response.user\n      peopleWhoWanCoffee.push({username: name, userId: message.user, pref: 'Coffee :coffee:'})\n      if (name === 'edwardvincent' || name === 'gina') {\n        bot.reply(message, 'Ok, putting you down for a coffee-quila')\n      } else {\n        bot.reply(message, 'Ok, putting you down for a cup of coffee')\n      }\n    })\n  } else {\n    bot.reply(message, 'Nobody is making any now. Why don\\'t you offer to make?')\n  }\n})\n\n// Listen for messages sent to coffeeBot to update preferences\ncontroller.hears('set my prefs.*', ['direct_message', 'direct_mention', 'mention'], function (bot, message) {\n  bot.startConversation(message, function (error, convo) {\n    if (error) {\n      console.log(error)\n    }\n    // Ask the user how they take their coffee\n    convo.ask('Ok, how do you take your coffee?', function (response, convo) {\n      convo.say('Cool, you said: ' + response.text)\n      convo.next()\n\n      // Save the users prefs to a JSON file\n      controller.storage.users.save({\n        id: message.user + '_coffee_pref',\n        coffee_pref: response.text\n      }, function (error) {\n        if (error) {\n          console.log(error)\n        }\n      })\n\n      convo.say('Your coffee preferences have been saved.')\n      convo.next()\n    })\n\n    // Ask the user how they take their tea\n    convo.ask('Ok, how do you take your tea?', function (response, convo) {\n      convo.say('Cool, you said: ' + response.text)\n      convo.next()\n\n      // Save the users prefs to a JSON file\n      controller.storage.users.save({\n        id: message.user + 'tea_pref',\n        coffee_pref: response.text\n      }, function (error) {\n        if (error) {\n          console.log(error)\n        }\n      })\n\n      convo.say('Your tea preferences have been saved.')\n      convo.next()\n    })\n  })\n})\n\n// Listen for messages that someone wants help with coffee bot\ncontroller.hears('.*Help.*', ['direct_message', 'direct_mention', 'mention'], function (bot, message) {\n  bot.reply(message, 'Send `@coffee-bot coffeetime` if you would like to offer to make a batch of tea or coffee.')\n  bot.reply(message, 'Send `@coffee-bot set my prefs` to save your tea and coffee preferences. This info will be sent to the user who offered to make.')\n  bot.reply(message, 'After someone has offered to make coffee send `@coffee-bot I want tea` or `@coffee-bot I want coffee` to place your order')\n})\n\n// Add a small amount of personality\ncontroller.hears('.*Hello.*', ['direct_message', 'direct_mention', 'mention'], function (bot, message) {\n  bot.reply(message, 'Hi there!')\n})\n"]}