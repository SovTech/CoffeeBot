{"version":3,"sources":["../index.js"],"names":["controller","slackbot","debug","json_file_store","canJoinForCoffee","peopleWhoWanCoffee","spawn","token","startRTM","hears","bot","message","console","log","api","users","info","user","error","response","name","push","username","userId","makingCoffee","storage","get","err","user_data","save","id","count","setTimeout","peopleString","forEach","reply","startConversation","convo","ask","say","text","next","coffee_pref"],"mappings":"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","file":"index.js","sourcesContent":["import Botkit from \"botkit\";\nimport {slackBotKey} from './secrets';\n\nconst controller = Botkit.slackbot({\n    debug: false,\n    //include \"log: false\" to disable logging\n    //or a \"logLevel\" integer from 0 to 7 to adjust logging verbosity\n    json_file_store: 'path_to_json_database'\n});\n\nlet canJoinForCoffee = false; // a person can only join for coffee is someone has offered to make coffee\nlet peopleWhoWanCoffee = []; // array to hold the people who want coffee in the batch\n\n// connect the bot to a stream of messages\ncontroller.spawn({\n    token: slackBotKey,\n}).startRTM();\n\n// Listen for messages sent to coffeeBot to let others know that you are about to make some coffee\ncontroller.hears('.*coffeetime.*', ['direct_message', 'direct_mention', 'mention'], function (bot, message) {\n    canJoinForCoffee = true;\n    console.log(message);\n\n    // Record some stats - save the number of times someone offers to make coffee\n    bot.api.users.info({user: message.user}, (error, response) => {\n        let name = response.user.name;\n        peopleWhoWanCoffee.push({username: name, userId: message.user, makingCoffee: true});\n\n        // Get the saved value and increment it by 1\n        controller.storage.users.get(message.user + '_coffee_making_count', function (err, user_data) {\n            controller.storage.users.save({\n                id: message.user + '_coffee_making_count',\n                count: user_data.count ? user_data.count++ : 1\n            }, function (err) {\n                if (err) {\n                    console.log(err)\n                }\n            });\n        });\n    });\n\n    // Only give people 1 minute to get of the coffee boat\n    setTimeout(function () {\n        canJoinForCoffee = false;\n\n        // at the end of the minute send a message with a summary of who wants what\n        let peopleString = '';\n        peopleWhoWanCoffee.forEach(function (user) {\n            peopleString += '\\n' + user.name + user.makingCoffee ? ' - making this batch' : null\n        });\n        bot.reply(message, 'Time is up. The orders look as follows: ' + peopleString);\n    }, 1000);\n});\n\n// Listen for messages that someone wants tea\ncontroller.hears('.*I want tea.*', ['direct_message', 'direct_mention', 'mention'], function (bot, message) {\n    if (canJoinForCoffee) {\n        bot.reply(message, 'Ok, putting you down for a cup of tea');\n    }\n    else {\n        bot.reply(message, 'Nobody is making any now. Why don\\'t you offer to make?');\n    }\n});\n\n// Listen for messages that someone wants coffee\ncontroller.hears('.*I want coffee.*', ['direct_message', 'direct_mention', 'mention'], function (bot, message) {\n    if (canJoinForCoffee) {\n        bot.reply(message, 'Ok, putting you down for a cup of coffee');\n    }\n    else {\n        bot.reply(message, 'Nobody is making any now. Why don\\'t you offer to make?');\n    }\n});\n\n\n// Listen for messages sent to coffeeBot to update preferences\ncontroller.hears('set my pref.*', ['direct_message', 'direct_mention', 'mention'], function (bot, message) {\n    console.log(message);\n\n    bot.startConversation(message, function (err, convo) {\n\n        // Ask the user how they take their coffee\n        convo.ask('Ok, how do you take your coffee?', function (response, convo) {\n\n            convo.say('Cool, you said: ' + response.text);\n            convo.next();\n\n            // Save the users prefs to a JSON file\n            controller.storage.users.save({\n                id: message.user + '_coffee_pref',\n                coffee_pref: response.text\n            }, function (err) {\n                if (err) {\n                    console.log(err)\n                }\n            });\n\n            convo.say('Your coffee preferences have been saved.');\n            convo.next();\n        });\n    });\n\n    // Ask the user how they take their tea\n    convo.ask('Ok, how do you take your tea?', function (response, convo) {\n\n        convo.say('Cool, you said: ' + response.text);\n        convo.next();\n\n        // Save the users prefs to a JSON file\n        controller.storage.users.save({\n            id: message.user + 'tea_pref',\n            coffee_pref: response.text\n        }, function (err) {\n            if (err) {\n                console.log(err)\n            }\n        });\n\n        convo.say('Your tea preferences have been saved.');\n        convo.next();\n    });\n});\n"]}